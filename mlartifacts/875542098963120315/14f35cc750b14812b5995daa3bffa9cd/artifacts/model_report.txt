### MODEL ARCHITECTURE ###
ShuffleNetV2WithCustomHead(
  (head): CNNPatchDownscaleHead(
    (features): Sequential(
      (0): Conv2d(3, 32, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 3, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2))
    )
  )
  (encoder): Sequential(
    (0): Sequential(
      (0): Conv2d(3, 24, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (1): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (2): Sequential(
      (0): InvertedResidual(
        (branch1): Sequential(
          (0): Conv2d(24, 24, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=24, bias=False)
          (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): Conv2d(24, 58, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (4): ReLU(inplace=True)
        )
        (branch2): Sequential(
          (0): Conv2d(24, 58, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(58, 58, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=58, bias=False)
          (4): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(58, 58, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (1): InvertedResidual(
        (branch1): Sequential()
        (branch2): Sequential(
          (0): Conv2d(58, 58, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(58, 58, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=58, bias=False)
          (4): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(58, 58, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (2): InvertedResidual(
        (branch1): Sequential()
        (branch2): Sequential(
          (0): Conv2d(58, 58, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(58, 58, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=58, bias=False)
          (4): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(58, 58, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (3): InvertedResidual(
        (branch1): Sequential()
        (branch2): Sequential(
          (0): Conv2d(58, 58, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(58, 58, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=58, bias=False)
          (4): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(58, 58, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(58, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
    )
    (3): Sequential(
      (0): InvertedResidual(
        (branch1): Sequential(
          (0): Conv2d(116, 116, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=116, bias=False)
          (1): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (4): ReLU(inplace=True)
        )
        (branch2): Sequential(
          (0): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(116, 116, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=116, bias=False)
          (4): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (1): InvertedResidual(
        (branch1): Sequential()
        (branch2): Sequential(
          (0): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(116, 116, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=116, bias=False)
          (4): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (2): InvertedResidual(
        (branch1): Sequential()
        (branch2): Sequential(
          (0): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(116, 116, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=116, bias=False)
          (4): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (3): InvertedResidual(
        (branch1): Sequential()
        (branch2): Sequential(
          (0): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(116, 116, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=116, bias=False)
          (4): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (4): InvertedResidual(
        (branch1): Sequential()
        (branch2): Sequential(
          (0): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(116, 116, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=116, bias=False)
          (4): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (5): InvertedResidual(
        (branch1): Sequential()
        (branch2): Sequential(
          (0): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(116, 116, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=116, bias=False)
          (4): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (6): InvertedResidual(
        (branch1): Sequential()
        (branch2): Sequential(
          (0): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(116, 116, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=116, bias=False)
          (4): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (7): InvertedResidual(
        (branch1): Sequential()
        (branch2): Sequential(
          (0): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(116, 116, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=116, bias=False)
          (4): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(116, 116, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(116, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
    )
    (4): Sequential(
      (0): InvertedResidual(
        (branch1): Sequential(
          (0): Conv2d(232, 232, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=232, bias=False)
          (1): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): Conv2d(232, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (4): ReLU(inplace=True)
        )
        (branch2): Sequential(
          (0): Conv2d(232, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(232, 232, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=232, bias=False)
          (4): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(232, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (1): InvertedResidual(
        (branch1): Sequential()
        (branch2): Sequential(
          (0): Conv2d(232, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(232, 232, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=232, bias=False)
          (4): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(232, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (2): InvertedResidual(
        (branch1): Sequential()
        (branch2): Sequential(
          (0): Conv2d(232, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(232, 232, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=232, bias=False)
          (4): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(232, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
      (3): InvertedResidual(
        (branch1): Sequential()
        (branch2): Sequential(
          (0): Conv2d(232, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(232, 232, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=232, bias=False)
          (4): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): Conv2d(232, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (6): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (7): ReLU(inplace=True)
        )
      )
    )
    (5): Sequential(
      (0): Conv2d(464, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (6): AdaptiveAvgPool2d(output_size=1)
  )
  (classifier): Sequential(
    (0): Flatten(start_dim=1, end_dim=-1)
    (1): Linear(in_features=1024, out_features=128, bias=True)
    (2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): ReLU(inplace=True)
    (4): Dropout(p=0.5, inplace=False)
    (5): Linear(in_features=128, out_features=64, bias=True)
    (6): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (7): ReLU(inplace=True)
    (8): Dropout(p=0.5, inplace=False)
    (9): Linear(in_features=64, out_features=5, bias=True)
  )
)

### MODEL SUMMARY ###
===============================================================================================
Layer (type:depth-idx)                        Output Shape              Param #
===============================================================================================
ShuffleNetV2WithCustomHead                    [1, 5]                    --
├─CNNPatchDownscaleHead: 1-1                  [1, 3, 224, 224]          --
│    └─Sequential: 2-1                        [1, 3, 180, 318]          --
│    │    └─Conv2d: 3-1                       [1, 32, 360, 635]         4,736
│    │    └─BatchNorm2d: 3-2                  [1, 32, 360, 635]         64
│    │    └─ReLU: 3-3                         [1, 32, 360, 635]         --
│    │    └─Conv2d: 3-4                       [1, 3, 180, 318]          2,403
├─Sequential: 1-2                             [1, 1024, 1, 1]           --
│    └─Sequential: 2-2                        [1, 24, 112, 112]         --
│    │    └─Conv2d: 3-5                       [1, 24, 112, 112]         648
│    │    └─BatchNorm2d: 3-6                  [1, 24, 112, 112]         48
│    │    └─ReLU: 3-7                         [1, 24, 112, 112]         --
│    └─MaxPool2d: 2-3                         [1, 24, 56, 56]           --
│    └─Sequential: 2-4                        [1, 116, 28, 28]          --
│    │    └─InvertedResidual: 3-8             [1, 116, 28, 28]          7,398
│    │    └─InvertedResidual: 3-9             [1, 116, 28, 28]          7,598
│    │    └─InvertedResidual: 3-10            [1, 116, 28, 28]          7,598
│    │    └─InvertedResidual: 3-11            [1, 116, 28, 28]          7,598
│    └─Sequential: 2-5                        [1, 232, 14, 14]          --
│    │    └─InvertedResidual: 3-12            [1, 232, 14, 14]          43,616
│    │    └─InvertedResidual: 3-13            [1, 232, 14, 14]          28,652
│    │    └─InvertedResidual: 3-14            [1, 232, 14, 14]          28,652
│    │    └─InvertedResidual: 3-15            [1, 232, 14, 14]          28,652
│    │    └─InvertedResidual: 3-16            [1, 232, 14, 14]          28,652
│    │    └─InvertedResidual: 3-17            [1, 232, 14, 14]          28,652
│    │    └─InvertedResidual: 3-18            [1, 232, 14, 14]          28,652
│    │    └─InvertedResidual: 3-19            [1, 232, 14, 14]          28,652
│    └─Sequential: 2-6                        [1, 464, 7, 7]            --
│    │    └─InvertedResidual: 3-20            [1, 464, 7, 7]            167,968
│    │    └─InvertedResidual: 3-21            [1, 464, 7, 7]            111,128
│    │    └─InvertedResidual: 3-22            [1, 464, 7, 7]            111,128
│    │    └─InvertedResidual: 3-23            [1, 464, 7, 7]            111,128
│    └─Sequential: 2-7                        [1, 1024, 7, 7]           --
│    │    └─Conv2d: 3-24                      [1, 1024, 7, 7]           475,136
│    │    └─BatchNorm2d: 3-25                 [1, 1024, 7, 7]           2,048
│    │    └─ReLU: 3-26                        [1, 1024, 7, 7]           --
│    └─AdaptiveAvgPool2d: 2-8                 [1, 1024, 1, 1]           --
├─Sequential: 1-3                             [1, 5]                    --
│    └─Flatten: 2-9                           [1, 1024]                 --
│    └─Linear: 2-10                           [1, 128]                  131,200
│    └─BatchNorm1d: 2-11                      [1, 128]                  256
│    └─ReLU: 2-12                             [1, 128]                  --
│    └─Dropout: 2-13                          [1, 128]                  --
│    └─Linear: 2-14                           [1, 64]                   8,256
│    └─BatchNorm1d: 2-15                      [1, 64]                   128
│    └─ReLU: 2-16                             [1, 64]                   --
│    └─Dropout: 2-17                          [1, 64]                   --
│    └─Linear: 2-18                           [1, 5]                    325
===============================================================================================
Total params: 1,400,972
Trainable params: 1,400,972
Non-trainable params: 0
Total mult-adds (Units.GIGABYTES): 1.36
===============================================================================================
Input size (MB): 10.97
Forward/backward pass size (MB): 149.62
Params size (MB): 5.60
Estimated Total Size (MB): 166.20
===============================================================================================