### MODEL ARCHITECTURE ###
ResNetWithCosineHead(
  (head): CNNPatchDownscaleHead(
    (features): Sequential(
      (0): Conv2d(3, 32, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 3, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2))
    )
  )
  (encoder): Sequential(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): AdaptiveAvgPool2d(output_size=(1, 1))
  )
  (classifier): Sequential(
    (0): Flatten(start_dim=1, end_dim=-1)
    (1): Linear(in_features=512, out_features=128, bias=True)
    (2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): ReLU(inplace=True)
    (4): Dropout(p=0.5, inplace=False)
    (5): CosineClassifier()
  )
)

### MODEL SUMMARY ###
===============================================================================================
Layer (type:depth-idx)                        Output Shape              Param #
===============================================================================================
ResNetWithCosineHead                          [1, 5]                    --
├─CNNPatchDownscaleHead: 1-1                  [1, 3, 224, 224]          --
│    └─Sequential: 2-1                        [1, 3, 180, 318]          --
│    │    └─Conv2d: 3-1                       [1, 32, 360, 635]         4,736
│    │    └─BatchNorm2d: 3-2                  [1, 32, 360, 635]         64
│    │    └─ReLU: 3-3                         [1, 32, 360, 635]         --
│    │    └─Conv2d: 3-4                       [1, 3, 180, 318]          2,403
├─Sequential: 1-2                             [1, 512, 1, 1]            --
│    └─Conv2d: 2-2                            [1, 64, 112, 112]         9,408
│    └─BatchNorm2d: 2-3                       [1, 64, 112, 112]         128
│    └─ReLU: 2-4                              [1, 64, 112, 112]         --
│    └─MaxPool2d: 2-5                         [1, 64, 56, 56]           --
│    └─Sequential: 2-6                        [1, 64, 56, 56]           --
│    │    └─BasicBlock: 3-5                   [1, 64, 56, 56]           73,984
│    │    └─BasicBlock: 3-6                   [1, 64, 56, 56]           73,984
│    └─Sequential: 2-7                        [1, 128, 28, 28]          --
│    │    └─BasicBlock: 3-7                   [1, 128, 28, 28]          230,144
│    │    └─BasicBlock: 3-8                   [1, 128, 28, 28]          295,424
│    └─Sequential: 2-8                        [1, 256, 14, 14]          --
│    │    └─BasicBlock: 3-9                   [1, 256, 14, 14]          919,040
│    │    └─BasicBlock: 3-10                  [1, 256, 14, 14]          1,180,672
│    └─Sequential: 2-9                        [1, 512, 7, 7]            --
│    │    └─BasicBlock: 3-11                  [1, 512, 7, 7]            3,673,088
│    │    └─BasicBlock: 3-12                  [1, 512, 7, 7]            4,720,640
│    └─AdaptiveAvgPool2d: 2-10                [1, 512, 1, 1]            --
├─Sequential: 1-3                             [1, 5]                    --
│    └─Flatten: 2-11                          [1, 512]                  --
│    └─Linear: 2-12                           [1, 128]                  65,664
│    └─BatchNorm1d: 2-13                      [1, 128]                  256
│    └─ReLU: 2-14                             [1, 128]                  --
│    └─Dropout: 2-15                          [1, 128]                  --
│    └─CosineClassifier: 2-16                 [1, 5]                    640
===============================================================================================
Total params: 11,250,275
Trainable params: 11,250,275
Non-trainable params: 0
Total mult-adds (Units.GIGABYTES): 3.03
===============================================================================================
Input size (MB): 10.97
Forward/backward pass size (MB): 158.16
Params size (MB): 45.00
Estimated Total Size (MB): 214.13
===============================================================================================